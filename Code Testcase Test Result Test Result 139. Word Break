Aim: To determine if a string can be segmented into a sequence of dictionary words.
* Objective:
 * 1. To implement a dynamic programming approach to solve the word break problem.
 * 2. To efficiently check if a given string can be constructed using a given dictionary.
 * 3. To utilize unordered sets for fast lookups and optimize performance.
 * 4. To improve problem-solving skills in string decomposition and DP.

#include <iostream>
#include <vector>
#include <unordered_set>

using namespace std;
bool wordBreak(string s, vector<string>& wordDict) {
    unordered_set<string> wordSet(wordDict.begin(), wordDict.end());
    vector<bool> dp(s.length() + 1, false);
    dp[0] = true;
    
    for (int i = 1; i <= s.length(); i++) {
        for (int j = 0; j < i; j++) {
            if (dp[j] && wordSet.find(s.substr(j, i - j)) != wordSet.end()) {
                dp[i] = true;
                break;
            }
        }
    }
    return dp[s.length()];
}

int main() {
    vector<string> wordDict1 = {"leet", "code"};
    cout << wordBreak("leetcode", wordDict1) << endl; // Output: 1 (true)
    
    vector<string> wordDict2 = {"apple", "pen"};
    cout << wordBreak("applepenapple", wordDict2) << endl; // Output: 1 (true)
    
    vector<string> wordDict3 = {"cats", "dog", "sand", "and", "cat"};
    cout << wordBreak("catsandog", wordDict3) << endl; // Output: 0 (false)
    
    return 0;
}
