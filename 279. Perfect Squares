 * Aim: To find the least number of perfect squares that sum to a given integer n.
* Objective:
 * 1. To understand and implement the concept of dynamic programming for solving the perfect squares problem.
 * 2. To efficiently compute the minimum number of perfect square numbers needed to sum up to n.
 * 3. To demonstrate an optimized approach using the bottom-up DP technique.
 * 4. To improve problem-solving skills related to numerical decomposition in competitive programming.
#include <iostream>
#include <vector>
#include <cmath>
#include <climits>

using namespace std;
int numSquares(int n) {
    vector<int> dp(n + 1, INT_MAX);
    dp[0] = 0;
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j * j <= i; j++) {
            dp[i] = min(dp[i], dp[i - j * j] + 1);
        }
    }
    return dp[n];
}

int main() {
    cout << numSquares(12) << endl; // Output: 3 (4 + 4 + 4)
    cout << numSquares(13) << endl; // Output: 2 (4 + 9)
    return 0;
}
