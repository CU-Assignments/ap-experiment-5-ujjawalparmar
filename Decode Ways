Aim: To implement an efficient algorithm to determine the number of ways to decode a given numeric string.
 * Objective:
 * 1. To understand and implement the concept of decoding an encoded message using a dynamic programming approach.
 * 2. To efficiently handle cases where single and double-digit decoding is possible.
 * 3. To demonstrate the use of iterative DP for solving string-based problems.
 * 4. To improve problem-solving skills related to sequence decoding in competitive programming.
#include <iostream>
#include <vector>

using namespace std;
int numDecodings(string s) {
    if (s.empty() || s[0] == '0') return 0;
    int n = s.size();
    vector<int> dp(n + 1, 0);
    dp[0] = 1;
    dp[1] = 1;
    
    for (int i = 2; i <= n; i++) {
        if (s[i - 1] != '0') {
            dp[i] += dp[i - 1];
        }
        int twoDigit = stoi(s.substr(i - 2, 2));
        if (twoDigit >= 10 && twoDigit <= 26) {
            dp[i] += dp[i - 2];
        }
    }
    return dp[n];
}

int main() {
    cout << numDecodings("12") << endl; // Output: 2
    cout << numDecodings("226") << endl; // Output: 3
    cout << numDecodings("06") << endl; // Output: 0
    return 0;
}
